/* eslint-disable @typescript-eslint/no-explicit-any */
"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { ChevronDown, Edit, Calendar, AlertTriangle } from "lucide-react"
import { useNavigate } from "react-router-dom"

const MedicalRecord = () => {
  // Add navigation
  const underline = "relative text-xl after:content-[''] after:absolute after:left-[-15px] after:bottom-[-4px] after:h-[2px] after:w-[calc(100%+30px)] after:bg-gray-200";

  const navigate = useNavigate()

  // State for form fields
  const [formData, setFormData] = useState({
    huongDieuTri: "S·ª≠ d·ª•ng ph√°c ƒë·ªì kh√°ng sinh k·∫øt h·ª£p v·ªõi thu·ªëc ·ª©c ch·∫ø ti·∫øt acid (PPI) trong 10-14 ng√†y.",
  })

  // State for prescription data
  const [prescriptionData, setPrescriptionData] = useState<any>(null)

  // State for appointment data
  const [appointmentData, setAppointmentData] = useState<any>(null)

  // State for alert
  const [showAlert, setShowAlert] = useState(false)

  // State for success modal
  const [showSuccessModal, setShowSuccessModal] = useState(false)

  // Ref for scrolling to treatment direction field
  const huongDieuTriRef = useRef<HTMLTextAreaElement>(null)
// Add this function after the state declarations
// const reloadData = () => {
//     const savedPrescription = localStorage.getItem("prescriptionData")
//     if (savedPrescription) {
//       setPrescriptionData(JSON.parse(savedPrescription))
//     }

//     const savedAppointment = localStorage.getItem("appointmentData")
//     if (savedAppointment) {
//       setAppointmentData(JSON.parse(savedAppointment))
//     }
//   }
  // Load prescription and appointment data from localStorage on component mount
  useEffect(() => {
    const loadData = () => {
      const savedPrescription = localStorage.getItem("prescriptionData")
      if (savedPrescription) {
        setPrescriptionData(JSON.parse(savedPrescription))
      }

      const savedAppointment = localStorage.getItem("appointmentData")
      if (savedAppointment) {
        setAppointmentData(JSON.parse(savedAppointment))
      }
    }

    // Load data initially
    loadData()

    // Add event listener for when window gains focus (user comes back to tab)
    const handleFocus = () => {
      loadData()
    }

    window.addEventListener("focus", handleFocus)

    // Also listen for storage events (when localStorage changes in other tabs)
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === "prescriptionData" || e.key === "appointmentData") {
        loadData()
      }
    }

    window.addEventListener("storage", handleStorageChange)

    // Cleanup
    return () => {
      window.removeEventListener("focus", handleFocus)
      window.removeEventListener("storage", handleStorageChange)
    }
  }, [])

  // Handle form field changes
  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  // Handle prescription button click
  const handlePrescriptionClick = () => {
    // Validate required fields before proceeding
    if (!formData.huongDieuTri?.trim()) {
      setShowAlert(true)
      // Scroll to the treatment direction field
      setTimeout(() => {
        huongDieuTriRef.current?.focus()
      }, 100)
      return
    }

    // If validation passes, navigate to prescription page
    navigate("/prescription")
  }

  // Handle appointment button click
  const handleAppointmentClick = () => {
    // Validate required fields before proceeding
    if (!formData.huongDieuTri?.trim()) {
      setShowAlert(true)
      // Scroll to the treatment direction field
      setTimeout(() => {
        huongDieuTriRef.current?.focus()
      }, 100)
      return
    }

    // If validation passes, navigate to appointment page
    navigate("/appointment")
  }

  // Close alert
  const closeAlert = () => {
    setShowAlert(false)
  }

  // Handle save button click
  const handleSave = () => {
    // Validate required fields before saving
    if (!formData.huongDieuTri?.trim()) {
      setShowAlert(true)
      setTimeout(() => {
        huongDieuTriRef.current?.focus()
      }, 100)
      return
    }

    // If validation passes, show success modal
    setShowSuccessModal(true)
  }

  // Close success modal
  const closeSuccessModal = () => {
    setShowSuccessModal(false)
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen relative">
      {/* Alert popup */}
      {showAlert && (
        <div className="fixed inset-0 flex items-start justify-center pt-20 z-50">
          <div className="fixed inset-0 bg-black/20" onClick={closeAlert}></div>
          <div className="bg-red-200 rounded-lg shadow-lg p-4 z-10 flex items-center gap-3 max-w-md">
            <AlertTriangle className="text-yellow-500 h-8 w-8" />
            <div className="text-blue-600 font-medium text-lg">B·∫°n ph·∫£i nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</div>
          </div>
        </div>
      )}

      {/* Success modal */}
      {showSuccessModal && (
        <div className="fixed inset-0 flex items-center justify-center z-50">
          <div className="fixed inset-0 bg-black/50" onClick={closeSuccessModal}></div>
          <div className="bg-white rounded-lg shadow-xl p-8 z-10 max-w-md mx-4">
            <div className="text-center">
              <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
                <svg className="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h3 className="text-xl font-medium text-blue-600 mb-6">L∆∞u b·ªánh √°n th√†nh c√¥ng!</h3>
              <button
                onClick={closeSuccessModal}
                className="bg-blue-1000 hover:bg-blue-600 text-white px-8 py-2 rounded font-medium"
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Print controls */}
      <div className="flex justify-end mb-4 gap-2">
        <button className="flex items-center gap-1 text-gray-600 hover:text-gray-800" onClick={handleSave}>
          <span>üìÑ</span> L∆∞u
        </button>
        <button className="flex items-center gap-1 text-gray-600 hover:text-gray-800">
          <span>üñ®Ô∏è</span> In
        </button>
        <button onClick={() => navigate('/')} className="flex items-center gap-1 text-gray-600 hover:text-gray-800">
          <span>‚úï</span> ƒê√≥ng
        </button>
      </div>

      <div className="grid grid-cols-4 gap-6">
        {/* Main content - spans 3 columns */}
        <div className="col-span-3 space-y-6">
          {/* TH√îNG TIN H√ÄNH CH√çNH */}
          <section className="bg-white rounded-lg shadow-sm">
            <div className="bg-white text-black px-4 py-2 rounded-t-lg">
              <h2 className={`font-semibold ${underline}`}>TH√îNG TIN H√ÄNH CH√çNH</h2>
            </div>
            <div className="p-4">
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">M√£ b·ªánh nh√¢n</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="BN001"
                    readOnly
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">H·ªç t√™n</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="Nguy·ªÖn VƒÉn An"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Gi·ªõi t√≠nh</label>
                  <input className="w-full border border-gray-300 rounded px-3 py-2 bg-white" defaultValue="Nam" />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">M√£ s·ªë kh√°m</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="SK001"
                    readOnly
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">S·ªë ƒëi·ªán tho·∫°i</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="0912345678"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Ng√†y sinh</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="27/07/1999"
                  />
                </div>
                <div className="col-span-3">
                  <label className="block text-sm font-medium mb-1">ƒê·ªãa ch·ªâ</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="123 ƒê∆∞·ªùng L√°ng, H√† N·ªôi"
                  />
                </div>
              </div>
            </div>
          </section>

          {/* TH√îNG TIN KH√ÅM B·ªÜNH */}
          <section className="bg-white rounded-lg shadow-sm">
            <div className="bg-white text-black px-4 py-2 rounded-t-lg">
              <h2 className={`font-semibold ${underline}`}>TH√îNG TIN KH√ÅM B·ªÜNH</h2>
            </div>
            <div className="p-4 space-y-4">
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Chuy√™n khoa</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="N·ªôi ti√™u h√≥a"
                    readOnly
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Ng√†y kh√°m</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-white"
                    defaultValue="20/05/2025"
                    readOnly
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">L√Ω do ƒë·∫øn kh√°m</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-blue-100"
                    defaultValue="--Kh√¥ng b·∫Øt bu·ªôc--"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Ti·ªÅn s·ª≠ b·ªánh</label>
                <input
                  className="w-full border border-gray-300 rounded px-3 py-2 bg-blue-100"
                  defaultValue="Vi√™m d·∫° d√†y"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Tri·ªáu ch·ª©ng</label>
                <textarea
                  className="w-full border border-gray-300 rounded px-3 py-2 h-20 bg-blue-100"
                  defaultValue="ƒêau v√πng th∆∞·ª£ng v·ªã, ƒÉn u·ªëng kh√≥ khƒÉn, hay √≥i m·ª≠a"
                />
              </div>

              <div className="grid grid-cols-4 gap-4">
                <div className='col-span-1'>
                  <label className="block text-sm font-medium mb-1">
                    B·ªánh ch√≠nh <span className="text-red-500">*</span>
                  </label>
                  <div className="relative">
                    <select className="w-full border border-gray-300 rounded px-3 py-2 appearance-none bg-blue-100">
                    <option>Lo√©t d·∫° d√†y</option>
                    <option>Vi√™m d·∫° d√†y</option>
                    <option>Tr√†o ng∆∞·ª£c d·∫° d√†y th·ª±c qu·∫£n</option>
                    <option>H·ªôi ch·ª©ng ru·ªôt k√≠ch th√≠ch</option>
                    <option>Vi√™m ƒë·∫°i tr√†ng</option>
                    <option>T√°o b√≥n</option>
                    <option>Ti√™u ch·∫£y c·∫•p</option>
                    <option>Vi√™m gan B</option>
                    <option>Vi√™m gan C</option>
                    <option>S·ªèi m·∫≠t</option>
                    <option>Suy gan</option>
                    <option>Suy th·∫≠n m·∫°n</option>
                    <option>Ti·ªÉu ƒë∆∞·ªùng type 2</option>
                    </select>
                    <ChevronDown className="absolute right-3 top-3 h-4 w-4 text-gray-400" />
                  </div>
                </div>
                <div className='col-span-3'>
                  <label className="block text-sm font-medium mb-1">M√¥ t·∫£ t√¨nh tr·∫°ng</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-blue-100"
                    defaultValue="Lo√©t d·∫° d√†y t√° tr√†ng nghi do NSAIDs."
                  />
                </div>
              </div>

              <div className="grid grid-cols-4 gap-4">
                <div className='col-span-1'>
                  <label className="block text-sm font-medium mb-1">B·ªánh ph·ª•</label>
                  <div className="relative">
                    <select className="w-full border border-gray-300 rounded px-3 py-2 appearance-none bg-blue-100">
                        <option>ƒê·∫ßy h∆°i</option>
                        <option>·ª¢ chua</option>
                        <option>Kh√≥ ti√™u</option>
                        <option>Bu·ªìn n√¥n</option>
                        <option>Ch∆∞·ªõng b·ª•ng</option>
                        <option>M·ªát m·ªèi</option>
                        <option>Ch√°n ƒÉn</option>
                        <option>ƒêau ƒë·∫ßu</option>
                        <option>Ch√≥ng m·∫∑t</option>
                        <option>M·∫•t ng·ªß</option>
                        <option>ƒêau d·∫° d√†y nh·∫π</option>
                        <option>Vi√™m h·ªçng</option>
                        <option>Ho khan</option>
                        <option>Ng·∫°t m≈©i</option>
                        <option>Kh√≥ th·ªü nh·∫π</option>
                        <option>Huy·∫øt √°p th·∫•p</option>
                        <option>Da xanh xao</option>
                        <option>H·∫° ƒë∆∞·ªùng huy·∫øt</option>

                    </select>
                    <ChevronDown className="absolute right-3 top-3 h-4 w-4 text-gray-400" />
                  </div>    
                </div>
                <div className='col-span-3'>
                  <label className="block text-sm font-medium mb-1">M√¥ t·∫£ t√¨nh tr·∫°ng</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-blue-100"
                    placeholder="Kh√¥ng b·∫Øt bu·ªôc"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  H∆∞·ªõng ƒëi·ªÅu tr·ªã <span className="text-red-500">*</span>
                </label>
                <textarea
                  ref={huongDieuTriRef}
                  name="huongDieuTri"
                  className={`w-full border ${!formData.huongDieuTri?.trim() && showAlert ? "border-red-500 ring-1 ring-red-500" : "border-gray-300"} bg-blue-100 rounded px-3 py-2 h-20`}
                  value={formData.huongDieuTri}
                  onChange={handleChange}
                />
              </div>

              <div className="grid grid-cols-4 gap-4">
                <div className='col-span-1'>
                  <label className="block text-sm font-medium mb-1">K·∫øt qu·∫£ kh√°m</label>
                  <div className="relative">
                    <select className="w-full border border-gray-300 rounded px-3 py-2 appearance-none bg-blue-100">
                        <option>ƒê·ª°</option>
                        <option>Kh√¥ng ƒë·ª°</option>
                        <option>Kh√¥ng r√µ</option>
                        <option>T·ªá h∆°n</option>
                    </select>
                    <ChevronDown className="absolute right-3 top-3 h-4 w-4 text-gray-400" />
                  </div>
                </div>
                <div className='col-span-3'>
                  <label className="block text-sm font-medium mb-1">Ghi ch√∫</label>
                  <input
                    className="w-full border border-gray-300 rounded px-3 py-2 bg-blue-100"
                    defaultValue="Kh√¥ng c√≥"
                  />
                </div>
              </div>
            </div>
          </section>
        </div>

        {/* Right sidebar - spans 1 column */}
        <div className="space-y-6">
          {/* SINH HI·ªÜU */}
          <section className="bg-white rounded-lg shadow-sm">
            <div className="bg-white text-black px-4 py-2 rounded-t-lg">
              <h2 className={`font-semibold ${underline}`}>SINH HI·ªÜU</h2>
            </div>
            <div className="p-4 grid grid-cols-1 gap-4 grid-rows-4">
              <div className="w-full flex items-center justify-between">
                <span className="text-sm font-medium">C√¢n n·∫∑ng</span>
                <div className="w-[60%] flex items-center gap-2 justify-end">
                  <input
                    className="flex-1 w-16 border border-gray-300 rounded px-2 py-1 bg-blue-100"
                    defaultValue="50"
                  />
                  <span className="text-sm text-gray-600 w-[25%]">kg</span>
                </div>
              </div><div className="w-full flex items-center justify-between">
                <span className="text-sm font-medium">Chi·ªÅu cao</span>
                <div className="w-[60%] flex items-center gap-2 justify-end">
                  <input
                    className="flex-1 w-16 border border-gray-300 rounded px-2 py-1 bg-blue-100"
                    defaultValue="150"
                  />
                  <span className="text-sm text-gray-600 w-[25%]">cm</span>
                </div>
              </div>
              <div className="w-full flex items-center justify-between">
                <span className="text-sm font-medium">Huy·∫øt √°p</span>
                <div className="w-[60%] flex items-center gap-2 justify-end">
                  <input
                    className="flex-1 w-16 border border-gray-300 rounded px-2 py-1 bg-blue-100"
                    defaultValue="70/130"
                  />
                  <span className="text-sm text-gray-600 w-[25%]">mmHg</span>
                </div>
              </div>
              <div className="w-full flex items-center justify-between">
                <span className="text-sm font-medium">Nh·ªãp tim</span>
                <div className="w-[60%] flex items-center gap-2 justify-end">
                  <input
                    className="flex-1 w-16 border border-gray-300 rounded px-2 py-1 bg-blue-100"
                    defaultValue="75"
                  />
                  <span className="text-sm text-gray-600 w-[25%]">l·∫ßn/ph√∫t</span>
                </div>
              </div>
            </div>
          </section>

          {/* X·ª¨ TR√ç */}
          <section className="bg-white rounded-lg shadow-sm">
            <div className="bg-white text-black px-4 py-2 rounded-t-lg">
              <h2 className={`font-semibold ${underline}`}>X·ª¨ TR√ç</h2>
            </div>
            <div className="p-4 space-y-2">
              <button className="text-blue-600 hover:text-blue-800 text-sm font-semibold" onClick={handlePrescriptionClick}>
                K√™ ƒë∆°n thu·ªëc
              </button>
              <br />
              <button className="text-blue-600 hover:text-blue-800 text-sm font-semibold" onClick={handleAppointmentClick}>
                H·∫πn t√°i kh√°m
              </button>
            </div>
          </section>
        </div>
      </div>

      {/* Bottom sections */}
      <div className="grid grid-cols-2 gap-6 mt-6">
        {/* K√ä ƒê∆†N THU·ªêC */}
        <section className="bg-white rounded-lg shadow-sm">
          <div className="relative text-xl after:content-[''] after:absolute after:left-[3px] after:bottom-[-4px] after:h-[2px] after:w-[calc(99%)] after:bg-gray-200 bg-white text-black px-4 py-2 rounded-t-lg flex items-center justify-between">
            <h2 className="font-semibold ">K√ä ƒê∆†N THU·ªêC</h2>
            <button className="cursor-pointer" onClick={handlePrescriptionClick}>
              <Edit className="h-4 w-4" />
            </button>
          </div>
          <div className="p-4">
            <table className="w-full">
              <thead>
                <tr className="bg-blue-500 border-gray-300">    
                  <th className="px-3 border-r-1 border-r-gray-400 py-2 text-left text-sm font-medium rounded-l-sm">STT</th>
                  <th className="px-3 border-r-1 border-r-gray-400 py-2 text-left text-sm font-medium">Thu·ªëc</th>
                  <th className="px-3 border-r-1 border-r-gray-400 py-2 text-left text-sm font-medium">ƒê∆°n v·ªã t√≠nh</th>
                  <th className="px-3 border-r-1 border-r-gray-400 py-2 text-left text-sm font-medium">S·ªë l∆∞·ª£ng</th>
                  <th className="px-3  py-2 text-left text-sm font-medium rounded-r-sm">S·ªë ng√†y</th>
                </tr>
              </thead>
              <tbody>
                {prescriptionData?.medications?.map((med: any, index: number) => (
                  <tr key={med.id} className="border-b">
                    <td className="px-3 py-2 text-sm">{index + 1}</td>
                    <td className="px-3 py-2 text-sm">{med.name}</td>
                    <td className="px-3 py-2 text-sm">{med.unit}</td>
                    <td className="px-3 py-2 text-sm">{med.quantity}</td>
                    <td className="px-3 py-2 text-sm">{med.days}</td>
                  </tr>
                )) || (
                  <tr className="border-b">
                    <td className="px-3 py-2 text-sm">1</td>
                    <td className="px-3 py-2 text-sm">Omeprazole</td>
                    <td className="px-3 py-2 text-sm">vi√™n</td>
                    <td className="px-3 py-2 text-sm">20</td>
                    <td className="px-3 py-2 text-sm">10</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </section>

        {/* H·∫∏N T√ÅI KH√ÅM */}
        <section className="bg-white rounded-lg shadow-sm">
          <div className="relative text-xl after:content-[''] after:absolute after:left-[3px] after:bottom-[-4px] after:h-[2px] after:w-[calc(99%)] after:bg-gray-200 bg-white text-black px-4 py-2 rounded-t-lg flex items-center justify-between">
            <h2 className="font-semibold">H·∫∏N T√ÅI KH√ÅM</h2>
            <button className="cursor-pointer" onClick={handleAppointmentClick}>
              <Edit className="h-4 w-4" />
            </button>
          </div>
          <div className="p-15">
            <div className="flex items-center justify-around h-30 bg-blue-100 rounded-[50px] p-5">
              <span className="text-2xl font-medium">Ng√†y t√°i kh√°m</span>
              {appointmentData ? (
                <div className="text-right">
                  <div className="text-xl font-medium">{appointmentData.date}</div>
                  <div className="text-sm text-gray-500">{appointmentData.time}</div>
                </div>
              ) : (
                <button
                  className="bg-blue-1000 hover:bg-blue-600 text-white px-4 py-2 rounded text-sm flex items-center gap-2"
                  onClick={handleAppointmentClick}
                >
                  <Calendar className="h-4 w-4" />
                  Ch·ªçn ng√†y
                </button>
              )}
            </div>
          </div>
        </section>
      </div>
    </div>
  )
}

export default MedicalRecord
